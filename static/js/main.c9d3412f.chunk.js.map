{"version":3,"sources":["components/Post.js","components/loader.js","components/allPost.js","components/googleLogin.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["moment","require","axios","default","Post","handleSubmit","e","preventDefault","Swal","fire","title","getTitle","value","message","getMessage","method","url","data","id","uuid","date","format","onClickHandler","props","history","push","location","key","console","log","this","className","onSubmit","required","type","placeholder","ref","input","rows","cols","onClick","Component","Loading","src","alt","AllPost","sendID","setState","isLoading","delete","then","res","getMyDataBack","get","resp","state","map","_id","Login","responseGoogle","response","clientId","buttonText","onSuccess","onFailure","Navigation","width","height","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9d3412f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport uuid from 'uuid';\nimport Swal from 'sweetalert2';\n\nvar moment = require('moment');\n\nconst axios = require('axios').default;\n\nclass Post extends Component{\n\n    handleSubmit = (e) =>{\n        e.preventDefault();\n        Swal.fire(\n            'Great!',\n            'Your Post Have been published',\n            'success'\n          );\n        const title = this.getTitle.value;\n        const message = this.getMessage.value;\n        axios({\n            method: 'post',\n            url: 'https://jsonbox.io/box_bcad4e3ef86ec3386014',\n            data: {\n                id:uuid(),\n                title: title,\n                message: message,  \n                date: moment().format(\"MMM Do YY\"), \n            }\n          });\n    }\n\n\n    onClickHandler = () =>{\n        this.props.history.push(\"/allpost\",{id :this.props.location.key})\n    }\n\n\n    componentDidMount(){\n        console.log(\"######\",this.props)\n    }\n   \n\n\n    render(){\n        return(\n            <div className=\"post\">\n                <h2>Create A Post</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <input className=\"form-control title\" required type=\"text\" placeholder=\"Enter Title Here!!\" ref={(input)=>this.getTitle = input} ></input><br></br>\n                    <textarea className=\"form-control\" type=\"required\" placeholder=\"Enter post here!!\" rows=\"5\" cols=\"28\" ref={(input)=>this.getMessage = input} ></textarea>\n                    <div className=\"button-wrapper\">\n                        <button className=\"btn btn-danger\">Post</button>\n                        <button onClick={this.onClickHandler} className=\"btn btn-danger\">View Post</button>\n                    </div>\n                    </form>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React, { Component } from 'react';\n\nclass Loading extends Component{\n    render(){\n        return(\n            <div className=\"loading\">\n                <img src=\"https://loading.io/spinners/ball/lg.bouncing-circle-loading-icon.gif\" className=\"loading\" alt=\"Carregando...\" />\n            </div>\n        );\n    }\n}\n\n export default Loading; ","import React, { Component } from 'react';\nimport Loader from '../components/loader'\n\nconst axios = require('axios').default;\n\nclass AllPost extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: [],\n            isLoading: false\n        }\n    }\n    componentDidMount(){\n        axios.get('https://jsonbox.io/box_bcad4e3ef86ec3386014').then(resp => {\n            this.setState({\n                data:resp.data\n            })\n        });\n    }\n\n    sendID = (id) =>{\n        this.setState({\n            isLoading:  true\n        });\n        axios.delete(`https://jsonbox.io/box_bcad4e3ef86ec3386014/${id}`)   \n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        this.getMyDataBack();\n      })\n    }\n    \n    getMyDataBack =()=>{\n        axios.get('https://jsonbox.io/box_bcad4e3ef86ec3386014').then(resp => {\n            console.log(\"@@@@@\",resp.data)\n            this.setState({\n                data:resp.data,\n                isLoading:false\n            })\n        });\n    }\n  render() {\n    return (\n    <div className=\"allpost\">\n      <h2>All Posts</h2>  \n      {console.log(\"####################\",this.state.isLoading)}\n     {\n        this.state.isLoading?\n            <Loader/>:<div>\n                {this.state.data.map((data, id) => (\n                       <div className=\"posts\" key = {id}>\n                           <div className=\"post-nav\">\n                               <p className=\"post-title\">{data.title}</p>\n                               <img alt=\"img\" onClick={() =>{this.sendID(data._id)}} src=\"https://cdn2.iconfinder.com/data/icons/medical-and-health-2-16/65/64-512.png\"></img>    \n                           </div>\n                           <p className=\"post-message\">{data.message}</p>\n                           <p className=\"post-date\">{data.date}</p>\n                       </div>\n                   ))\n                  }\n                </div>\n      \n     }\n        \n    </div>\n    );\n   }\n}\n\nexport default AllPost;","import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n \nclass Login extends Component {\n    responseGoogle = (response) => {\n        console.log(response,this.props);\n        this.props.history.push(\"post\")\n      }\n\n    onClickHandler = () =>{\n        this.props.history.push(\"allpost\")\n    }  \n      \n    render(){\n        return(\n            <div className=\"googleLogin\">\n                <GoogleLogin\n                    clientId=\"65098940793-s974qqjqe08olac640lkefml1sdbm82f.apps.googleusercontent.com\"\n                    buttonText=\"Login\"\n                    onSuccess={this.responseGoogle}\n                    onFailure={this.responseGoogle}\n                />\n            <br></br>\n            <button className=\"btn btn-danger\" onClick={this.onClickHandler}>view post</button>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\n\nclass Navigation extends Component{\n    render(){\n        return(\n            <div className=\"navbar navbar-light bg-light Navigation\">\n                <a className=\"navbar-brand\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" href=\"/\">Blogging</a>\n                <img src=\"https://cdn1.iconfinder.com/data/icons/internet-28/48/5-512.png\" alt=\"img\"></img>\n            </div>       \n        );\n    }\n}\n\nexport default Navigation;\n","import React from 'react';\nimport Post from './components/Post'\nimport './App.css';\nimport AllPost from './components/allPost';\nimport './main.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Login from './components/googleLogin';\nimport Navigation from './components/navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation/>\n      <div className=\"post-container d-flex justify-content-around\">\n        <Router>\n          <Route exact path = '/' component = {Login}/>\n          <Route exact path = '/post' component = {Post}/>\n          <Route exact path = '/allpost' component = {AllPost}/>\n        </Router>\n          \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App/>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}